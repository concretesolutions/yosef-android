apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.0"
}

def exclude = [
        "**/R.class",
        '*/R$*.class',
        "**/BuildConfig.*",
        "*/Manifest*.*",
        "**/*Builder.*",
        "ndroid/**/*.*",
        "**/**ContentProvider.*",
        "*/**Companion.*",
        "**/entity/**"
]


task jacocoReport(type: JacocoReport) {
    group "Reporting"
    description "Generate Jacoco coverage reports."

    reports {
        xml.enabled = false
        html.enabled = false
    }
    // not including java srcSet since project is 100% kotlin
    sourceDirectories = files(["$project.projectDir/src/main/kotlin"])
    classDirectories = (file("$project.buildDir/tmp/kotlin-classes/debug").exists()
            ? fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: exclude)
            : fileTree(dir: "$project.buildDir/classes", excludes: exclude))

    // scans for both unit and instrumented test coverage results
    executionData = fileTree(dir: "$project.buildDir", includes: ["jacoco/*.exec", "outputs/code-coverage/connected/*.ec"])
}

afterEvaluate {
    tasks.findByName("check").dependsOn("jacocoReport")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}
