buildscript {
    ext.kotlin_version = "1.2.31"
    ext.dokka_version = "0.9.16"
    ext.detekt = "1.0.0.RC6-3"

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.0'
        //noinspection DifferentKotlinGradleVersion
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jacoco:org.jacoco.core:0.8.0"
    }
}

// Order is important here
plugins { id "io.gitlab.arturbosch.detekt" version "1.0.0.RC6-3" }
apply plugin: "jacoco"
apply from: "$rootDir/tools/detekt.gradle"

allprojects {
    repositories {
        google()
        jcenter()
    }
}

ext {
    buildVersions = [
            minSdk    : 16,
            targetSdk : 27,
            compileSdk: 27,
            buildTools: "27.0.2"
    ]

    libsVersions = [
            kotlin    : kotlin_version,
            support   : "27.1.0",
            constraint: "1.0.2",
            picasso   : "2.5.2",
            glide     : "4.6.1",
            gson      : "2.8.2",
            canarinho : "1.2.0",
            lottie    : "2.5.0-rc1"
    ]

    testLibsVersions = [
            jUnit        : "4.12",
            espresso     : "3.0.1",
            mockito      : "2.12.0",
            mockitoKotlin: "1.5.0",
            roboeletric  : "3.6.1"
    ]

    lintersVersions = [
            ktlint: "0.20.0"
    ]
}

subprojects {
    apply plugin: 'org.jetbrains.dokka'

    apply from: "$rootDir/tools/quality.gradle"
    apply from: "$rootDir/tools/jacoco.gradle"

    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }
}

jacoco.toolVersion = "0.8.0"

task jacocoRootReport(type: JacocoReport) {

    group "Reporting"
    description "Generate Jacoco coverage reports."

    reports {
        xml.enabled = false
        html.enabled = true
    }

    def excludeProjects = ["sample"]

    // Collecting all source sets, compiled classes and coverage binaries from sub projects
    def sourceSets = subprojects.findAll { project -> !excludeProjects.contains(project.name) }
            .collect { project -> project.jacocoReport.sourceDirectories }.flatten()
    def classDirs = subprojects.findAll { project -> !excludeProjects.contains(project.name) }
            .collect { project -> project.jacocoReport.classDirectories }.flatten()
    def coverageBinaries = subprojects.findAll { project -> !excludeProjects.contains(project.name) }
            .collect { project -> project.jacocoReport.executionData }.flatten()

    sourceDirectories = files(sourceSets)
    classDirectories = files(classDirs)
    executionData = files(coverageBinaries)
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
